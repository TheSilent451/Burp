
1. sqlmap 

sqlmap -r any.txt --dbs

// in any.txt save the request you need to inject [  Capture the Request in burpsite and save it in a .txt file  ]

// The command sqlmap -r any.txt --dbs is used with sqlmap, a popular open-source penetration testing tool for detecting and exploiting SQL injection vulnerabilities in web applications.
// Here's a breakdown of the command:
// -r any.txt: This option tells sqlmap to read the HTTP request from a file named any.txt. This file should contain the full HTTP request, including headers and any payload data.
// --dbs: This option instructs sqlmap to enumerate the databases present in the target application.

sqlmap -r any.txt --os-shell

// in any.txt save the request you need to inject [  Capture the Request in burpsite and save it in a .txt file  ]

// In the command sqlmap -r test.txt --os-shell, the options --os-shell are used as follows:
// --os-shell: This option is a command within sqlmap that attempts to provide you with an interactive operating system shell on the target server after exploiting a SQL injection vulnerability.

// Explanation of Terms
// --os: This part of the command refers to the option that allows sqlmap to interact with the underlying operating system of the target server.
// shell: This specifies that you want to obtain a shell interface, allowing you to execute commands directly on the server's operating system.

Usage Context

// When you run this command, sqlmap will:
// Attempt to exploit the SQL injection based on the request in test.txt.
// If successful, it will give you a shell interface where you can run commands as if you were logged into the server.

sqlmap-u "http://the url u want to inject with the id " --batch
example: sqlmap-u "http://192.168.0.0/room.php?cod=1" –batch

sqlmap --wizard [This command will open a sqlmap console]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Sn1per Command Overview

Basic Command Structure
sniper -t <target> [options]
Example : sniper -t example.com

Common Commands

Scan a Target
// Description: Performs a basic scan on the specified target.
// sniper -t <target-ip-or-domain>

Full Scan
// Description: Conducts a comprehensive scan using multiple modules.
// sniper -t <target-ip-or-domain> -f

Save Output
// Description: Saves the scan results to a specified directory.
// sniper -t <target-ip-or-domain> -o <output-directory>

Web Application Scan
// Description: Specifically targets web applications for vulnerabilities.
// sniper -t <target-ip-or-domain> --web

Service Version Detection
// Description: Identifies services and their versions running on the target.
// sniper -t <target-ip-or-domain> --services

Nmap Integration
// Description: Runs an Nmap scan as part of the Sn1per process.
// sniper -t <target-ip-or-domain> -n

Custom Configuration File
// Description: Uses a specified configuration file to customize scans.
// sniper -t <target-ip-or-domain> -c <config-file>

Scan for Specific Vulnerabilities
// Description: Focuses on certain known vulnerabilities.
// sniper -t <target-ip-or-domain> --scan-vulns

Update Sn1per
// Description: Updates the Sn1per tool to the latest version.
// sniper --update

View Help and Options
// Description: Displays all available commands and options.
// sniper --help

Example Usage

Performing a Full Scan on a Target:
// sniper -t example.com -f

Scanning a Specific IP Address with Output:
// sniper -t 192.168.1.10 -o /path/to/output

Running a Web Application Security Scan:
// sniper -t example.com --web

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.XSSFUZZ

Usage

Basic Scan
// python xssFuzz.py -u "<target_url>" -o output.txt
// This command runs a basic scan on the target URL and saves the results in output.txt.

Verbose Output
// python xssFuzz.py -u "<target_url>" -o output.txt --verbose
// Provides more detailed information about the scan.

Tag-Specific Testing
// python xssFuzz.py -u "<target_url>" --tag img -o output.txt
// Scan only specific HTML tags, such as <img>.

Custom Payloads
// python xssFuzz.py -u "<target_url>" -p "<payload_file>" -o output.txt
// Use custom payloads to scan specific attack vectors.

Custom Headers
// python xssFuzz.py -u "<target_url>" -H "Header1:Value,Header2:Value" -o output.txt
// Include custom headers in your scan.

Limiting Scope
// python xssFuzz.py -u "<target_url>" --limit 5 -o output.txt
// Limit the scan to the first 5 tags and 5 events for faster results.

Increasing Speed with Threads
// python xssFuzz.py -u "<target_url>" -t 10 -o output.txt
// Increase scan speed by running 10 concurrent threads.

Validation Mode
// python xssFuzz.py -u "<target_url>" -V -o output.txt

 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. fuff

Fuff is a powerful web application security tool designed for fuzzing endpoints.It helps identify vulnerabilities by sending numerous requests based on a wordlist. 

Purpose
// Fuzzing: Fuff is primarily used to discover hidden endpoints and files by replacing a specific part of the URL with entries from a wordlist.
// Security Testing: It assists security professionals in testing web applications for potential vulnerabilities.

Features
// High Performance: Fuff is optimized for speed and can handle multiple requests concurrently, making it efficient for large-scale fuzzing.
// Flexible Output: Users can filter responses based on status codes, content lengths, and more, providing targeted results.
// Custom Wordlists: Users can utilize custom wordlists to tailor the fuzzing process to specific applications or environments.

Usage
// Navigate to the Directory
// Use the cd command to navigate to the folder where fuff is installed. For example:cd /path/to/fuff
// Run the Command
// Use the command to start fuzzing a target URL:fuff -u <URL> -w <wordlist>
// Replace <URL> with your target and <wordlist> with the path to your wordlist file.

Customize Options
// Specify parameters like the number of threads or minimum response codes to filter. For example:fuff -u http://example.com/FUZZ -w /path/to/wordlist.txt -mc 200

Output to File
// To save the output to a file, you can redirect it:fuff -u http://example.com/FUZZ -w /path/to/wordlist.txt > output.txt
// fuff -u http://example.com/FUZZ -w /path/to/wordlist.txt -mc 200 > output.txt
// This command will fuzz the specified URL with the provided wordlist and save responses with a 200 status code to output.txt.

Applications
// Web Application Testing: Security testers use it to identify hidden endpoints, files, and potential vulnerabilities in web applications.
// Penetration Testing: Ethical hackers utilize Fuff as part of their toolset to explore and exploit security weaknesses.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. DIRB

DIRB is a web content scanner that helps discover resources on web servers. It uses a wordlist to brute-force directories and files. Here’s a concise overview:

Purpose
// Directory and File Enumeration: DIRB scans a specified URL to find hidden directories and files by attempting to access them based on a given wordlist.
// Security Testing: Useful in penetration testing to identify potential vulnerabilities in web applications.

Features
// Custom Wordlists: Users can specify their own wordlists to tailor the scan to specific applications or environments.
// Response Filtering: It can filter results based on HTTP response codes, allowing users to focus on potentially interesting files or directories.
// Recursive Scanning: DIRB can perform recursive scans to discover deeper directory structures.

Usage

Basic Command
// To scan a target URL with the default wordlist:dirb http://example.com

Using a Custom Wordlist
// To specify a custom wordlist:dirb http://example.com /path/to/wordlist.txt

Filtering by Response Code
// To filter results by specific HTTP status codes:dirb http://example.com -r

Output to File
// To save the output to a file:dirb http://example.com -o output.txt

Example Command
// dirb http://example.com /path/to/wordlist.txt -o output.txt
// This command will scan the specified URL with the custom wordlist and save the results to output.txt.

Applications
// Web Application Testing: Security professionals use it to uncover hidden endpoints and sensitive files.
// Penetration Testing: A valuable tool for ethical hackers looking to assess the security of web applications.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Nmap

Nmap (Network Mapper) is a powerful open-source tool used for network discovery and security auditing.
It’s widely utilized by network administrators and security professionals to identify devices on a network, discover services, and assess security vulnerabilities.

Purpose

// Network Discovery: Nmap can discover hosts and services on a computer network, providing insights into the devices connected and their operating systems.
// Security Auditing: It helps in identifying vulnerabilities in networked systems, allowing security professionals to harden their defenses.

Features

// Port Scanning: Nmap can perform various types of port scans to determine which ports are open, closed, or filtered on a target system.
// Service and Version Detection: It can identify running services on open ports and their versions, which is crucial for vulnerability assessment.
// OS Detection: Nmap can determine the operating system of a target host through various techniques.
// Scripting Engine: Nmap includes a scripting engine (NSE) that allows users to write scripts to automate a wide range of networking tasks.

Usage

Basic Scan
// To scan a target IP or domain for open ports:nmap <target_ip_or_domain>
// Example:nmap 192.168.1.1

Service Version Detection
// To detect services and versions running on the open ports:nmap -sV <target_ip_or_domain>

Operating System Detection
// To determine the operating system of the target:nmap -O <target_ip_or_domain>

Aggressive Scan
// To combine service detection, OS detection, and other features for a detailed analysis:nmap -A <target_ip_or_domain>

Scan Multiple IPs
// To scan a range of IPs:nmap 192.168.1.1-254

Output to File
// To save the results in a file:nmap -oN output.txt <target_ip_or_domain>
// Example Command:nmap -sV -O 192.168.1.1
// This command performs a service version detection and OS detection scan on the target IP 192.168.1.1.

Applications

// Network Security Auditing: Security professionals use Nmap to assess the security posture of networks by identifying vulnerabilities.
// Network Inventory: System administrators utilize it to map out network devices and services for inventory and management purposes.
// Penetration Testing: Ethical hackers rely on Nmap to gather information about targets before conducting further testing.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. Dalfox

Dalfox is a fast and powerful tool designed for detecting and exploiting XSS (Cross-Site Scripting) vulnerabilities in web applications. It is highly useful for security professionals and penetration testers.

Purpose

// XSS Vulnerability Detection: Dalfox scans web applications to identify potential XSS vulnerabilities by injecting various payloads into parameters and analyzing the responses.
// Payload Automation: Automates the process of testing multiple endpoints with different payloads to find XSS issues quickly.

Features

// Fast Scanning: Designed for high-speed scanning, allowing users to quickly test large numbers of endpoints.
// Custom Payloads: Supports custom payloads for more targeted testing.
// Contextual Scanning: Can detect different types of XSS (e.g., reflected, stored) based on the application context.
// Report Generation: Generates reports to summarize the findings for further analysis.

Installation

// Dalfox Installation on Kali Linux
// To install Dalfox on Kali Linux, you can follow these methods:

1. Using Go (Recommended)
// Install Go (if not already installed):
// sudo apt update
// sudo apt install golang
// Install Dalfox:
// go install github.com/hahwul/dalfox/v2@latest
// Add Go binaries to your PATH (if not already added):
// echo 'export PATH=$PATH:$HOME/go/bin' >> ~/.bashrc
// source ~/.bashrc

2. Downloading Precompiled Binaries
// Download the latest binary:
// wget https://github.com/hahwul/dalfox/releases/latest/download/dalfox-linux-amd64
// Make the binary executable:
// chmod +x dalfox-linux-amd64
// Move it to a directory in your PATH:
// sudo mv dalfox-linux-amd64 /usr/local/bin/dalfox

3. Using Docker
// If you prefer using Docker, you can run Dalfox in a container with the following command:
// docker run -it --rm --name dalfox hahwul/dalfox
// Verifying Installation
// After installation, you can verify that Dalfox is installed correctly by checking its version:
// dalfox -v

Usage

Basic Scan
// To perform a basic scan on a target URL:dalfox url <URL>

Using a Custom Payload File
// To specify a custom payload file:dalfox url <URL> --payload /path/to/payloads.txt

JSON Output
// To output results in JSON format:dalfox url <URL> --json

Multiple URLs
// To scan multiple URLs from a file:dalfox file <urls.txt>

Verbose Mode
// To enable verbose output for more detailed information during the scan:dalfox url <URL> -v

Example Command
// dalfox url http://example.com/search?q=<script>alert(1)</script> --json
// This command will test the specified search parameter for XSS vulnerabilities using the default payloads and output the results in JSON format.

Applications

// Web Application Security Testing: Used by security professionals to find and exploit XSS vulnerabilities in web applications.
// Penetration Testing: An essential tool for ethical hackers during the assessment phase of web applications.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. XSS Strike

XSS Strike is an advanced tool designed for finding and exploiting Cross-Site Scripting (XSS) vulnerabilities in web applications.
It automates the process of testing various payloads and helps security professionals assess the security of web applications.

Purpose

// XSS Vulnerability Detection: XSS Strike is specifically built to discover XSS vulnerabilities by injecting payloads into web application parameters and analyzing responses.
// Payload Automation: It streamlines the testing process by automatically injecting a wide range of XSS payloads.

Features

// Advanced Payloads: Comes with a comprehensive set of XSS payloads to test various scenarios.
// Recursive Scanning: Supports recursive scanning to discover XSS vulnerabilities in deeply nested parameters.
// User-Friendly Interface: Provides a simple command-line interface to perform scans efficiently.
// Output Reports: Generates reports summarizing findings, which can be useful for further analysis.

Installation

// Clone the Repository
// You can clone the XSS Strike GitHub repository: git clone https://github.com/s0md3v/XSStrike.git
// cd XSStrike
// Install Dependencies
// Make sure you have Python 3 installed. Install the required dependencies:
// pip install -r requirements.txt
// Run XSS Strike
// You can run XSS Strike using Python: python xsstrike.py

Usage

Basic Scan
// To perform a scan on a target URL:
// python xsstrike.py -u http://example.com/page?param=value

Using Custom Payloads
// To use custom payloads, you can specify a payload file:
// python xsstrike.py -u http://example.com/page?param=value -p /path/to/payloads.txt

Verbose Mode
// To enable verbose output:
// python xsstrike.py -u http://example.com/page?param=value -v

Output to File
// To save results to a file:
// python xsstrike.py -u http://example.com/page?param=value -o output.txt

Example Command
// python xsstrike.py -u http://example.com/search?q=<script>alert(1)</script> -v
// This command tests the specified query parameter for XSS vulnerabilities using a basic payload and enables verbose output.

Applications

// Web Application Security Testing: Used by security testers to find and exploit XSS vulnerabilities in applications.
// Penetration Testing: An essential tool for ethical hackers during the assessment phase of web applications.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
