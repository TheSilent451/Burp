1. sqlmap 

sqlmap --wizard
sqlmap-u "http://the url u want to inject with the id " --batch
example: sqlmap-u "http://192.168.0.0/room.php?cod=1" –batch

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Sn1per Command Overview

Basic Command Structure
sniper -t <target> [options]
Example : sniper -t example.com

Common Commands

Scan a Target
// Description: Performs a basic scan on the specified target.
// sniper -t <target-ip-or-domain>

Full Scan
// Description: Conducts a comprehensive scan using multiple modules.
// sniper -t <target-ip-or-domain> -f

Save Output
// Description: Saves the scan results to a specified directory.
// sniper -t <target-ip-or-domain> -o <output-directory>

Web Application Scan
// Description: Specifically targets web applications for vulnerabilities.
// sniper -t <target-ip-or-domain> --web

Service Version Detection
// Description: Identifies services and their versions running on the target.
// sniper -t <target-ip-or-domain> --services

Nmap Integration
// Description: Runs an Nmap scan as part of the Sn1per process.
// sniper -t <target-ip-or-domain> -n

Custom Configuration File
// Description: Uses a specified configuration file to customize scans.
// sniper -t <target-ip-or-domain> -c <config-file>

Scan for Specific Vulnerabilities
// Description: Focuses on certain known vulnerabilities.
// sniper -t <target-ip-or-domain> --scan-vulns

Update Sn1per
// Description: Updates the Sn1per tool to the latest version.
// sniper --update

View Help and Options
// Description: Displays all available commands and options.
// sniper --help

Example Usage

Performing a Full Scan on a Target:
// sniper -t example.com -f

Scanning a Specific IP Address with Output:
// sniper -t 192.168.1.10 -o /path/to/output

Running a Web Application Security Scan:
// sniper -t example.com --web

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.XSSFUZZ

Usage

Basic Scan
// python xssFuzz.py -u "<target_url>" -o output.txt
// This command runs a basic scan on the target URL and saves the results in output.txt.

Verbose Output
// python xssFuzz.py -u "<target_url>" -o output.txt --verbose
// Provides more detailed information about the scan.

Tag-Specific Testing
// python xssFuzz.py -u "<target_url>" --tag img -o output.txt
// Scan only specific HTML tags, such as <img>.

Custom Payloads
// python xssFuzz.py -u "<target_url>" -p "<payload_file>" -o output.txt
// Use custom payloads to scan specific attack vectors.

Custom Headers
// python xssFuzz.py -u "<target_url>" -H "Header1:Value,Header2:Value" -o output.txt
// Include custom headers in your scan.

Limiting Scope
// python xssFuzz.py -u "<target_url>" --limit 5 -o output.txt
// Limit the scan to the first 5 tags and 5 events for faster results.

Increasing Speed with Threads
// python xssFuzz.py -u "<target_url>" -t 10 -o output.txt
// Increase scan speed by running 10 concurrent threads.

Validation Mode
// python xssFuzz.py -u "<target_url>" -V -o output.txt

 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. fuff

Fuff is a powerful web application security tool designed for fuzzing endpoints.It helps identify vulnerabilities by sending numerous requests based on a wordlist. 

Purpose
// Fuzzing: Fuff is primarily used to discover hidden endpoints and files by replacing a specific part of the URL with entries from a wordlist.
// Security Testing: It assists security professionals in testing web applications for potential vulnerabilities.

Features
// High Performance: Fuff is optimized for speed and can handle multiple requests concurrently, making it efficient for large-scale fuzzing.
// Flexible Output: Users can filter responses based on status codes, content lengths, and more, providing targeted results.
// Custom Wordlists: Users can utilize custom wordlists to tailor the fuzzing process to specific applications or environments.

Usage
// Navigate to the Directory
// Use the cd command to navigate to the folder where fuff is installed. For example:cd /path/to/fuff
// Run the Command
// Use the command to start fuzzing a target URL:fuff -u <URL> -w <wordlist>
// Replace <URL> with your target and <wordlist> with the path to your wordlist file.

Customize Options
// Specify parameters like the number of threads or minimum response codes to filter. For example:fuff -u http://example.com/FUZZ -w /path/to/wordlist.txt -mc 200

Output to File
// To save the output to a file, you can redirect it:fuff -u http://example.com/FUZZ -w /path/to/wordlist.txt > output.txt
// fuff -u http://example.com/FUZZ -w /path/to/wordlist.txt -mc 200 > output.txt
// This command will fuzz the specified URL with the provided wordlist and save responses with a 200 status code to output.txt.

Applications
// Web Application Testing: Security testers use it to identify hidden endpoints, files, and potential vulnerabilities in web applications.
// Penetration Testing: Ethical hackers utilize Fuff as part of their toolset to explore and exploit security weaknesses.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. DIRB

DIRB is a web content scanner that helps discover resources on web servers. It uses a wordlist to brute-force directories and files. Here’s a concise overview:

Purpose
// Directory and File Enumeration: DIRB scans a specified URL to find hidden directories and files by attempting to access them based on a given wordlist.
// Security Testing: Useful in penetration testing to identify potential vulnerabilities in web applications.

Features
// Custom Wordlists: Users can specify their own wordlists to tailor the scan to specific applications or environments.
// Response Filtering: It can filter results based on HTTP response codes, allowing users to focus on potentially interesting files or directories.
// Recursive Scanning: DIRB can perform recursive scans to discover deeper directory structures.

Usage

Basic Command
// To scan a target URL with the default wordlist:dirb http://example.com

Using a Custom Wordlist
// To specify a custom wordlist:dirb http://example.com /path/to/wordlist.txt

Filtering by Response Code
// To filter results by specific HTTP status codes:dirb http://example.com -r

Output to File
// To save the output to a file:dirb http://example.com -o output.txt

Example Command
// dirb http://example.com /path/to/wordlist.txt -o output.txt
// This command will scan the specified URL with the custom wordlist and save the results to output.txt.

Applications
// Web Application Testing: Security professionals use it to uncover hidden endpoints and sensitive files.
// Penetration Testing: A valuable tool for ethical hackers looking to assess the security of web applications.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
